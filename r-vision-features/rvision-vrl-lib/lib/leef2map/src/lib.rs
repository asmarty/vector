// Inspired by "https://docs.serde.rs/serde_json/"
// Starting point for universal parser and structure detector in serde environment (but not with serde yet -_-)

// FIXME: No escaped symbols in text readers! Delimiter and special symbols must not occur in headers, keys and values!
// FIXME: Other specifications may specify cases for escaping special characters.
mod nom_impl;
use bytes::Bytes;
use std::collections::BTreeMap;
use syslog::SyslogData;

pub use nom_impl::{parse_leef, parse_leef_map};

#[allow(clippy::zero_prefixed_literal)]
static HEX: [u8; 256] = {
    const __: u8 = 255; // not a hex digit
    [
        //   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // 0
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // 1
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // 2
        00, 01, 02, 03, 04, 05, 06, 07, 08, 09, __, __, __, __, __, __, // 3
        __, 10, 11, 12, 13, 14, 15, __, __, __, __, __, __, __, __, __, // 4
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // 5
        __, 10, 11, 12, 13, 14, 15, __, __, __, __, __, __, __, __, __, // 6
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // 7
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // 8
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // 9
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // A
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // B
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // C
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // D
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // E
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, // F
    ]
};

fn decode_hex_digit(val: u8) -> Option<u8> {
    let n = HEX[val as usize];
    if n == 255 {
        None
    } else {
        Some(n)
    }
}

// Syslog headers:
// * ahost
// * at
// * syslog_facility
// * syslog_priority
// * syslog_severity
// LEEF headers:
// * leefVersion
// * deviceVendor
// * productName
// * productVersion
// * eventName
// * leefDelimiter

#[derive(Clone, Debug, Eq, PartialEq)]
pub struct LeefLine<V = Bytes> {
    pub syslog: SyslogData,
    pub leef_components: BTreeMap<String, V>,
}

impl<V> Default for LeefLine<V> {
    fn default() -> Self {
        Self {
            syslog: SyslogData::default(),
            leef_components: BTreeMap::new(),
        }
    }
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
enum Separator {
    Single(u8),
    Double(u8, u8),
}

impl From<u8> for Separator {
    fn from(b: u8) -> Self {
        Separator::Single(b)
    }
}

#[cfg(test)]
mod leef_tests {
    use super::*;
    use std::collections::BTreeMap;

    fn deserialize(data: &[u8]) -> LeefLine {
        parse_leef(data).unwrap().1
    }

    #[test]
    fn basic_leef1() {
        let data = b"<13>1 2019-01-18T11:07:53.520Z 192.168.1.1 LEEF:1.0|Microsoft|MSExchange|2007|7732|ABC=123\tQWE=iop";

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: Some("1".into()),
                    syslog_priority: Some("13".into()),
                    syslog_severity: Some("5".into()),
                    at: Some("2019-01-18T11:07:53.520Z".into()),
                    ahost: Some("192.168.1.1".into())
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("ABC".into(), "123".into());
                    map.insert("QWE".into(), "iop".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }

    #[test]
    fn basic_leef2() {
        let data = b"<13>1 2019-01-18T11:07:53.520Z 192.168.1.1 LEEF:2.0|Microsoft|MSExchange|2007|7732|^|ABC=123^QWE=io\t|p";

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: Some("1".into()),
                    syslog_priority: Some("13".into()),
                    syslog_severity: Some("5".into()),
                    at: Some("2019-01-18T11:07:53.520Z".into()),
                    ahost: Some("192.168.1.1".into())
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("ABC".into(), "123".into());
                    map.insert("QWE".into(), "io\t|p".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }

    #[test]
    fn basic_leef2_trim() {
        let data = b"<13>1 2019-01-18T11:07:53.520Z 192.168.1.1 LEEF:2.0|Microsoft|MSExchange|2007|7732|^|ABC  =  123 ^ QWE  = io\t|p";

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: Some("1".into()),
                    syslog_priority: Some("13".into()),
                    syslog_severity: Some("5".into()),
                    at: Some("2019-01-18T11:07:53.520Z".into()),
                    ahost: Some("192.168.1.1".into())
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("ABC".into(), "123".into());
                    map.insert("QWE".into(), "io\t|p".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }
    #[test]
    fn basic_leef2_hex_separator() {
        let data = b"<13>1 2019-01-18T11:07:53.520Z 192.168.1.1 LEEF:2.0|Microsoft|MSExchange|2007|7732|x5E|ABC=123^QWE=io\t|p";

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: Some("1".into()),
                    syslog_priority: Some("13".into()),
                    syslog_severity: Some("5".into()),
                    at: Some("2019-01-18T11:07:53.520Z".into()),
                    ahost: Some("192.168.1.1".into())
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("ABC".into(), "123".into());
                    map.insert("QWE".into(), "io\t|p".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }
    #[test]
    fn basic_leef2_syslog_rfc_3164() {
        let data = b"<13>Jan  8 11:07:53 192.168.1.1 LEEF:2.0|Microsoft|MSExchange|2007|7732|^|ABC=123^QWE=io|p";

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: Some("1".into()),
                    syslog_priority: Some("13".into()),
                    syslog_severity: Some("5".into()),
                    at: Some("Jan 8 11:07:53".into()),
                    ahost: Some("192.168.1.1".into())
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("ABC".into(), "123".into());
                    map.insert("QWE".into(), "io|p".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }
    #[test]
    fn basic_leef2_unicode_separator() {
        let data = "<13>Jan 18 11:07:53 192.168.1.1 LEEF:2.0|Microsoft|MSExchange|2007|7732|xC2A9|ABC=123Â©QWE=io|p".as_bytes();

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: Some("1".into()),
                    syslog_priority: Some("13".into()),
                    syslog_severity: Some("5".into()),
                    at: Some("Jan 18 11:07:53".into()),
                    ahost: Some("192.168.1.1".into())
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("ABC".into(), "123".into());
                    map.insert("QWE".into(), "io|p".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }

    #[test]
    fn basic_leef2_syslog_rfc_3164_without_pri() {
        let data = b"Jan 18 11:07:53 192.168.1.1 LEEF:2.0|Microsoft|MSExchange|2007|7732|^|ABC=123^QWE=io|p";

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: None,
                    syslog_priority: None,
                    syslog_severity: None,
                    at: Some("Jan 18 11:07:53".into()),
                    ahost: Some("192.168.1.1".into())
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("ABC".into(), "123".into());
                    map.insert("QWE".into(), "io|p".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }

    #[test]
    fn basic_leef2_without_syslog() {
        let data = b"  LEEF:2.0|Microsoft|MSExchange|2007|7732|^|ABC=123^QWE=io|p";

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: None,
                    syslog_priority: None,
                    syslog_severity: None,
                    at: None,
                    ahost: None
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("ABC".into(), "123".into());
                    map.insert("QWE".into(), "io|p".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }

    #[test]
    fn basic_leef2_malformed_syslog() {
        let data = b" <qwe> asd eqw LEEF:2.0|Microsoft|MSExchange|2007|7732|^|ABC=123^QWE=io|p";

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: None,
                    syslog_priority: None,
                    syslog_severity: None,
                    at: None,
                    ahost: None
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("ABC".into(), "123".into());
                    map.insert("QWE".into(), "io|p".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }

    #[test]
    fn basic_leef2_double_separator() {
        let data =
            "  LEEF:2.0|Microsoft|MSExchange|2007|7732|x0d0A|ABC=1\r23\r\nQWE=io\n|p".as_bytes();

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: None,
                    syslog_priority: None,
                    syslog_severity: None,
                    at: None,
                    ahost: None
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("ABC".into(), "1\r23".into());
                    map.insert("QWE".into(), "io\n|p".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }

    #[test]
    fn basic_leef2_malformed_separator_becomes_part_of_key() {
        let data =
            "  LEEF:2.0|Microsoft|MSExchange|2007|7732|abcd|ABC=1\r23\tQWE=io\n|p".as_bytes();

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: None,
                    syslog_priority: None,
                    syslog_severity: None,
                    at: None,
                    ahost: None
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("abcd|ABC".into(), "1\r23".into());
                    map.insert("QWE".into(), "io\n|p".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }

    #[test]
    fn basic_leef2_only_header() {
        let data = "LEEF:2.0|Microsoft|MSExchange|2007|7732|^|".as_bytes();

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: None,
                    syslog_priority: None,
                    syslog_severity: None,
                    at: None,
                    ahost: None
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }

    #[test]
    fn basic_leef2_only_header_no_sep() {
        let data = "LEEF:2.0|Microsoft|MSExchange|2007|7732|".as_bytes();

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: None,
                    syslog_priority: None,
                    syslog_severity: None,
                    at: None,
                    ahost: None
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }

    #[test]
    #[should_panic]
    fn basic_leef2_only_header_and_malformed_body() {
        let data = "LEEF:2.0|Microsoft|MSExchange|2007|7732|^|asdasd".as_bytes();

        let _leef = deserialize(data);
    }

    #[test]
    fn big_leef2() {
        let data = "LEEF:2.0|Microsoft|MSExchange|2007|7732|x09|AgentDevice=WindowsLog\tAgentLogFile=Security\tPluginVersion=7.2.9.105\tSource=Microsoft-Windows-Security-Auditing\tComputer=dc04.lab2012.local\tOriginatingComputer=10.99.101.128\tUser=\tDomain=\tEventID=4624\tEventIDCode=4624\tEventType=8\tEventCategory=12544\tRecordNumber=11103971\tTimeGenerated=1610705793\tTimeWritten=1610705793\tLevel=Log Always\tKeywords=Audit Success\tTask=SE_ADT_LOGON_LOGON\tOpcode=Info\tMessage=ÐÑÐ¾Ð´ Ñ ÑÑÐµÑÐ½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÑÑ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½ ÑÑÐ¿ÐµÑÐ½Ð¾.  Ð¡ÑÐ±ÑÐµÐºÑ:  ÐÐ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾ÑÑÐ¸:  NULL SID  ÐÐ¼Ñ ÑÑÐµÑÐ½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸:  -  ÐÐ¾Ð¼ÐµÐ½ ÑÑÐµÑÐ½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸:  -  ÐÐ¾Ð´ Ð²ÑÐ¾Ð´Ð°:  0x0  Ð¢Ð¸Ð¿ Ð²ÑÐ¾Ð´Ð°:   3  Ð£ÑÐ¾Ð²ÐµÐ½Ñ Ð¾Ð»Ð¸ÑÐµÑÐ²Ð¾ÑÐµÐ½Ð¸Ñ:  ÐÐµÐ»ÐµÐ³Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ  ÐÐ¾Ð²ÑÐ¹ Ð²ÑÐ¾Ð´:  ÐÐ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾ÑÑÐ¸:  NT AUTHORITY\\Ð¡ÐÐ¡Ð¢ÐÐÐ  ÐÐ¼Ñ ÑÑÐµÑÐ½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸:  DC04$  ÐÐ¾Ð¼ÐµÐ½ ÑÑÐµÑÐ½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸:  LAB2012  ÐÐ¾Ð´ Ð²ÑÐ¾Ð´Ð°:  0x1E6112B9  GUID Ð²ÑÐ¾Ð´Ð°:  {06457096-03A4-55FB-28EA-9882B565E681}  Ð¡Ð²ÐµÐ´ÐµÐ½Ð¸Ñ Ð¾ Ð¿ÑÐ¾ÑÐµÑÑÐµ:  ÐÐ´ÐµÐ½ÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾Ñ Ð¿ÑÐ¾ÑÐµÑÑÐ°:  0x0  ÐÐ¼Ñ Ð¿ÑÐ¾ÑÐµÑÑÐ°:  -  Ð¡Ð²ÐµÐ´ÐµÐ½Ð¸Ñ Ð¾ ÑÐµÑÐ¸:  ÐÐ¼Ñ ÑÐ°Ð±Ð¾ÑÐµÐ¹ ÑÑÐ°Ð½ÑÐ¸Ð¸: -  Ð¡ÐµÑÐµÐ²Ð¾Ð¹ Ð°Ð´ÑÐµÑ Ð¸ÑÑÐ¾ÑÐ½Ð¸ÐºÐ°: fe80::7830:1b00:4e5f:1300  ÐÐ¾ÑÑ Ð¸ÑÑÐ¾ÑÐ½Ð¸ÐºÐ°:  51755  Ð¡Ð²ÐµÐ´ÐµÐ½Ð¸Ñ Ð¾ Ð¿ÑÐ¾Ð²ÐµÑÐºÐµ Ð¿Ð¾Ð´Ð»Ð¸Ð½Ð½Ð¾ÑÑÐ¸:  ÐÑÐ¾ÑÐµÑÑ Ð²ÑÐ¾Ð´Ð°:  Kerberos  ÐÐ°ÐºÐµÑ Ð¿ÑÐ¾Ð²ÐµÑÐºÐ¸ Ð¿Ð¾Ð´Ð»Ð¸Ð½Ð½Ð¾ÑÑÐ¸: Kerberos  ÐÑÐ¾Ð¼ÐµÐ¶ÑÑÐ¾ÑÐ½ÑÐµ ÑÐ»ÑÐ¶Ð±Ñ: -  ÐÐ¼Ñ Ð¿Ð°ÐºÐµÑÐ° (ÑÐ¾Ð»ÑÐºÐ¾ NTLM): -  ÐÐ»Ð¸Ð½Ð° ÐºÐ»ÑÑÐ°:  0  ÐÐ°Ð½Ð½Ð¾Ðµ ÑÐ¾Ð±ÑÑÐ¸Ðµ Ð²Ð¾Ð·Ð½Ð¸ÐºÐ°ÐµÑ Ð¿ÑÐ¸ ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ð¸ ÑÐµÐ°Ð½ÑÐ° Ð²ÑÐ¾Ð´Ð°. ÐÐ½Ð¾ ÑÐ¾Ð·Ð´Ð°ÐµÑÑÑ Ð² ÑÐ¸ÑÑÐµÐ¼Ðµ, Ð²ÑÐ¾Ð´ Ð² ÐºÐ¾ÑÐ¾ÑÑÑ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½.  ÐÐ¾Ð»Ñ \"Ð¡ÑÐ±ÑÐµÐºÑ\" ÑÐºÐ°Ð·ÑÐ²Ð°ÑÑ Ð½Ð° ÑÑÐµÑÐ½ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ Ð»Ð¾ÐºÐ°Ð»ÑÐ½Ð¾Ð¹ ÑÐ¸ÑÑÐµÐ¼Ñ, Ð·Ð°Ð¿ÑÐ¾ÑÐ¸Ð²ÑÑÑ Ð²ÑÐ¾Ð´. ÐÐ±ÑÑÐ½Ð¾ ÑÑÐ¾ ÑÐ»ÑÐ¶Ð±Ð°, Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ, ÑÐ»ÑÐ¶Ð±Ð° \"Ð¡ÐµÑÐ²ÐµÑ\", Ð¸Ð»Ð¸ Ð»Ð¾ÐºÐ°Ð»ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐµÑÑ, ÑÐ°ÐºÐ¾Ð¹ ÐºÐ°Ðº Winlogon.exe Ð¸Ð»Ð¸ Services.exe.  Ð Ð¿Ð¾Ð»Ðµ \"Ð¢Ð¸Ð¿ Ð²ÑÐ¾Ð´Ð°\" ÑÐºÐ°Ð·Ð°Ð½ ÑÐ¸Ð¿ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð½Ð¾Ð³Ð¾ Ð²ÑÐ¾Ð´Ð°. Ð¡Ð°Ð¼ÑÐ¼Ð¸ ÑÐ°ÑÐ¿ÑÐ¾ÑÑÑÐ°Ð½ÐµÐ½Ð½ÑÐ¼Ð¸ ÑÐ²Ð»ÑÑÑÑÑ ÑÐ¸Ð¿Ñ 2 (Ð¸Ð½ÑÐµÑÐ°ÐºÑÐ¸Ð²Ð½ÑÐ¹) Ð¸ 3 (ÑÐµÑÐµÐ²Ð¾Ð¹).  ÐÐ¾Ð»Ñ \"ÐÐ¾Ð²ÑÐ¹ Ð²ÑÐ¾Ð´\" ÑÐºÐ°Ð·ÑÐ²Ð°ÑÑ Ð½Ð° ÑÑÐµÑÐ½ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ, Ð´Ð»Ñ ÐºÐ¾ÑÐ¾ÑÐ¾Ð¹ ÑÐ¾Ð·Ð´Ð°Ð½ Ð½Ð¾Ð²ÑÐ¹ ÑÐµÐ°Ð½Ñ Ð²ÑÐ¾Ð´Ð°, ÑÐ¾ ÐµÑÑÑ Ð½Ð° ÑÑÐµÑÐ½ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ, Ñ ÐºÐ¾ÑÐ¾ÑÐ¾Ð¹ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½ Ð²ÑÐ¾Ð´.  Ð Ð¿Ð¾Ð»ÑÑ, ÐºÐ¾ÑÐ¾ÑÑÐµ Ð¾ÑÐ½Ð¾ÑÑÑÑÑ Ðº ÑÐµÑÐ¸, ÑÐºÐ°Ð·Ð°Ð½ Ð¸ÑÑÐ¾ÑÐ½Ð¸Ðº Ð·Ð°Ð¿ÑÐ¾ÑÐ° Ð½Ð° ÑÐ´Ð°Ð»ÐµÐ½Ð½ÑÐ¹ Ð²ÑÐ¾Ð´. ÐÐ¼Ñ ÑÐ°Ð±Ð¾ÑÐµÐ¹ ÑÑÐ°Ð½ÑÐ¸Ð¸ Ð´Ð¾ÑÑÑÐ¿Ð½Ð¾ Ð½Ðµ Ð²ÑÐµÐ³Ð´Ð°, Ð¸ Ð² Ð½ÐµÐºÐ¾ÑÐ¾ÑÑÑ ÑÐ»ÑÑÐ°ÑÑ ÑÑÐ¾ Ð¿Ð¾Ð»Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð¾ÑÑÐ°Ð²Ð°ÑÑÑÑ Ð½ÐµÐ·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð½ÑÐ¼.  ÐÐ¾Ð»Ðµ \"Ð£ÑÐ¾Ð²ÐµÐ½Ñ Ð¾Ð»Ð¸ÑÐµÑÐ²Ð¾ÑÐµÐ½Ð¸Ñ\" Ð·Ð°Ð´Ð°ÐµÑ Ð´Ð¾Ð¿ÑÑÑÐ¸Ð¼ÑÑ ÑÑÐµÐ¿ÐµÐ½Ñ Ð¾Ð»Ð¸ÑÐµÑÐ²Ð¾ÑÐµÐ½Ð¸Ñ Ð´Ð»Ñ Ð¿ÑÐ¾ÑÐµÑÑÐ¾Ð² Ð² Ð´Ð°Ð½Ð½Ð¾Ð¼ ÑÐµÐ°Ð½ÑÐµ Ð²ÑÐ¾Ð´Ð° Ð² ÑÐ¸ÑÑÐµÐ¼Ñ.  ÐÐ¾Ð»Ñ ÑÐ²ÐµÐ´ÐµÐ½Ð¸Ð¹ Ð¾ Ð¿ÑÐ¾Ð²ÐµÑÐºÐµ Ð¿Ð¾Ð´Ð»Ð¸Ð½Ð½Ð¾ÑÑÐ¸ ÑÐ¾Ð´ÐµÑÐ¶Ð°Ñ Ð¿Ð¾Ð´ÑÐ¾Ð±Ð½ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð¾ ÐºÐ¾Ð½ÐºÑÐµÑÐ½Ð¾Ð¼ Ð·Ð°Ð¿ÑÐ¾ÑÐµ Ð½Ð° Ð²ÑÐ¾Ð´.  - GUID Ð²ÑÐ¾Ð´Ð° - ÑÑÐ¾ ÑÐ½Ð¸ÐºÐ°Ð»ÑÐ½ÑÐ¹ Ð¸Ð´ÐµÐ½ÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾Ñ, ÐºÐ¾ÑÐ¾ÑÑÐ¹ Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑÐµÑ ÑÐ¾Ð¿Ð¾ÑÑÐ°Ð²Ð¸ÑÑ Ð´Ð°Ð½Ð½Ð¾Ðµ ÑÐ¾Ð±ÑÑÐ¸Ðµ Ñ ÑÐ¾Ð±ÑÑÐ¸ÐµÐ¼ KDC.  - Ð Ð¿Ð¾Ð»Ðµ \"ÐÑÐ¾Ð¼ÐµÐ¶ÑÑÐ¾ÑÐ½ÑÐµ ÑÐ»ÑÐ¶Ð±Ñ\" ÑÐºÐ°Ð·Ð°Ð½Ð¾, ÐºÐ°ÐºÐ¸Ðµ Ð¿ÑÐ¾Ð¼ÐµÐ¶ÑÑÐ¾ÑÐ½ÑÐµ ÑÐ»ÑÐ¶Ð±Ñ ÑÑÐ°ÑÑÐ²Ð¾Ð²Ð°Ð»Ð¸ Ð² Ð´Ð°Ð½Ð½Ð¾Ð¼ Ð·Ð°Ð¿ÑÐ¾ÑÐµ Ð½Ð° Ð²ÑÐ¾Ð´.  - ÐÐ¾Ð»Ðµ \"ÐÐ¼Ñ Ð¿Ð°ÐºÐµÑÐ°\" ÑÐºÐ°Ð·ÑÐ²Ð°ÐµÑ Ð½Ð° Ð¿Ð¾Ð´Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð», Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð½ÑÐ¹ Ñ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ð°Ð¼Ð¸ NTLM.  - ÐÐ¾Ð»Ðµ \"ÐÐ»Ð¸Ð½Ð° ÐºÐ»ÑÑÐ°\" ÑÐ¾Ð´ÐµÑÐ¶Ð¸Ñ Ð´Ð»Ð¸Ð½Ñ ÑÐ¾Ð·Ð´Ð°Ð½Ð½Ð¾Ð³Ð¾ ÐºÐ»ÑÑÐ° ÑÐµÐ°Ð½ÑÐ°. Ð­ÑÐ¾ Ð¿Ð¾Ð»Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð¸Ð¼ÐµÑÑ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ \"0\", ÐµÑÐ»Ð¸ ÐºÐ»ÑÑ ÑÐµÐ°Ð½ÑÐ° Ð½Ðµ Ð·Ð°Ð¿ÑÐ°ÑÐ¸Ð²Ð°Ð»ÑÑ.\n".as_bytes();

        let leef = deserialize(data);

        assert_eq!(
            leef,
            LeefLine {
                syslog: SyslogData {
                    syslog_facility: None,
                    syslog_priority: None,
                    syslog_severity: None,
                    at: None,
                    ahost: None
                },
                leef_components: {
                    let mut map = BTreeMap::new();
                    map.insert("AgentDevice".into(), "WindowsLog".into());
                    map.insert("AgentLogFile".into(), "Security".into());
                    map.insert("Computer".into(), "dc04.lab2012.local".into());
                    map.insert("Domain".into(), "".into());
                    map.insert("EventCategory".into(), "12544".into());
                    map.insert("EventID".into(), "4624".into());
                    map.insert("EventIDCode".into(), "4624".into());
                    map.insert("EventType".into(), "8".into());
                    map.insert("Keywords".into(), "Audit Success".into());
                    map.insert("Level".into(), "Log Always".into());
                    map.insert("Message".into(), "ÐÑÐ¾Ð´ Ñ ÑÑÐµÑÐ½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÑÑ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½ ÑÑÐ¿ÐµÑÐ½Ð¾.  Ð¡ÑÐ±ÑÐµÐºÑ:  ÐÐ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾ÑÑÐ¸:  NULL SID  ÐÐ¼Ñ ÑÑÐµÑÐ½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸:  -  ÐÐ¾Ð¼ÐµÐ½ ÑÑÐµÑÐ½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸:  -  ÐÐ¾Ð´ Ð²ÑÐ¾Ð´Ð°:  0x0  Ð¢Ð¸Ð¿ Ð²ÑÐ¾Ð´Ð°:   3  Ð£ÑÐ¾Ð²ÐµÐ½Ñ Ð¾Ð»Ð¸ÑÐµÑÐ²Ð¾ÑÐµÐ½Ð¸Ñ:  ÐÐµÐ»ÐµÐ³Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ  ÐÐ¾Ð²ÑÐ¹ Ð²ÑÐ¾Ð´:  ÐÐ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾ÑÑÐ¸:  NT AUTHORITY\\Ð¡ÐÐ¡Ð¢ÐÐÐ  ÐÐ¼Ñ ÑÑÐµÑÐ½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸:  DC04$  ÐÐ¾Ð¼ÐµÐ½ ÑÑÐµÑÐ½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸:  LAB2012  ÐÐ¾Ð´ Ð²ÑÐ¾Ð´Ð°:  0x1E6112B9  GUID Ð²ÑÐ¾Ð´Ð°:  {06457096-03A4-55FB-28EA-9882B565E681}  Ð¡Ð²ÐµÐ´ÐµÐ½Ð¸Ñ Ð¾ Ð¿ÑÐ¾ÑÐµÑÑÐµ:  ÐÐ´ÐµÐ½ÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾Ñ Ð¿ÑÐ¾ÑÐµÑÑÐ°:  0x0  ÐÐ¼Ñ Ð¿ÑÐ¾ÑÐµÑÑÐ°:  -  Ð¡Ð²ÐµÐ´ÐµÐ½Ð¸Ñ Ð¾ ÑÐµÑÐ¸:  ÐÐ¼Ñ ÑÐ°Ð±Ð¾ÑÐµÐ¹ ÑÑÐ°Ð½ÑÐ¸Ð¸: -  Ð¡ÐµÑÐµÐ²Ð¾Ð¹ Ð°Ð´ÑÐµÑ Ð¸ÑÑÐ¾ÑÐ½Ð¸ÐºÐ°: fe80::7830:1b00:4e5f:1300  ÐÐ¾ÑÑ Ð¸ÑÑÐ¾ÑÐ½Ð¸ÐºÐ°:  51755  Ð¡Ð²ÐµÐ´ÐµÐ½Ð¸Ñ Ð¾ Ð¿ÑÐ¾Ð²ÐµÑÐºÐµ Ð¿Ð¾Ð´Ð»Ð¸Ð½Ð½Ð¾ÑÑÐ¸:  ÐÑÐ¾ÑÐµÑÑ Ð²ÑÐ¾Ð´Ð°:  Kerberos  ÐÐ°ÐºÐµÑ Ð¿ÑÐ¾Ð²ÐµÑÐºÐ¸ Ð¿Ð¾Ð´Ð»Ð¸Ð½Ð½Ð¾ÑÑÐ¸: Kerberos  ÐÑÐ¾Ð¼ÐµÐ¶ÑÑÐ¾ÑÐ½ÑÐµ ÑÐ»ÑÐ¶Ð±Ñ: -  ÐÐ¼Ñ Ð¿Ð°ÐºÐµÑÐ° (ÑÐ¾Ð»ÑÐºÐ¾ NTLM): -  ÐÐ»Ð¸Ð½Ð° ÐºÐ»ÑÑÐ°:  0  ÐÐ°Ð½Ð½Ð¾Ðµ ÑÐ¾Ð±ÑÑÐ¸Ðµ Ð²Ð¾Ð·Ð½Ð¸ÐºÐ°ÐµÑ Ð¿ÑÐ¸ ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ð¸ ÑÐµÐ°Ð½ÑÐ° Ð²ÑÐ¾Ð´Ð°. ÐÐ½Ð¾ ÑÐ¾Ð·Ð´Ð°ÐµÑÑÑ Ð² ÑÐ¸ÑÑÐµÐ¼Ðµ, Ð²ÑÐ¾Ð´ Ð² ÐºÐ¾ÑÐ¾ÑÑÑ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½.  ÐÐ¾Ð»Ñ \"Ð¡ÑÐ±ÑÐµÐºÑ\" ÑÐºÐ°Ð·ÑÐ²Ð°ÑÑ Ð½Ð° ÑÑÐµÑÐ½ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ Ð»Ð¾ÐºÐ°Ð»ÑÐ½Ð¾Ð¹ ÑÐ¸ÑÑÐµÐ¼Ñ, Ð·Ð°Ð¿ÑÐ¾ÑÐ¸Ð²ÑÑÑ Ð²ÑÐ¾Ð´. ÐÐ±ÑÑÐ½Ð¾ ÑÑÐ¾ ÑÐ»ÑÐ¶Ð±Ð°, Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ, ÑÐ»ÑÐ¶Ð±Ð° \"Ð¡ÐµÑÐ²ÐµÑ\", Ð¸Ð»Ð¸ Ð»Ð¾ÐºÐ°Ð»ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐµÑÑ, ÑÐ°ÐºÐ¾Ð¹ ÐºÐ°Ðº Winlogon.exe Ð¸Ð»Ð¸ Services.exe.  Ð Ð¿Ð¾Ð»Ðµ \"Ð¢Ð¸Ð¿ Ð²ÑÐ¾Ð´Ð°\" ÑÐºÐ°Ð·Ð°Ð½ ÑÐ¸Ð¿ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð½Ð¾Ð³Ð¾ Ð²ÑÐ¾Ð´Ð°. Ð¡Ð°Ð¼ÑÐ¼Ð¸ ÑÐ°ÑÐ¿ÑÐ¾ÑÑÑÐ°Ð½ÐµÐ½Ð½ÑÐ¼Ð¸ ÑÐ²Ð»ÑÑÑÑÑ ÑÐ¸Ð¿Ñ 2 (Ð¸Ð½ÑÐµÑÐ°ÐºÑÐ¸Ð²Ð½ÑÐ¹) Ð¸ 3 (ÑÐµÑÐµÐ²Ð¾Ð¹).  ÐÐ¾Ð»Ñ \"ÐÐ¾Ð²ÑÐ¹ Ð²ÑÐ¾Ð´\" ÑÐºÐ°Ð·ÑÐ²Ð°ÑÑ Ð½Ð° ÑÑÐµÑÐ½ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ, Ð´Ð»Ñ ÐºÐ¾ÑÐ¾ÑÐ¾Ð¹ ÑÐ¾Ð·Ð´Ð°Ð½ Ð½Ð¾Ð²ÑÐ¹ ÑÐµÐ°Ð½Ñ Ð²ÑÐ¾Ð´Ð°, ÑÐ¾ ÐµÑÑÑ Ð½Ð° ÑÑÐµÑÐ½ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ, Ñ ÐºÐ¾ÑÐ¾ÑÐ¾Ð¹ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½ Ð²ÑÐ¾Ð´.  Ð Ð¿Ð¾Ð»ÑÑ, ÐºÐ¾ÑÐ¾ÑÑÐµ Ð¾ÑÐ½Ð¾ÑÑÑÑÑ Ðº ÑÐµÑÐ¸, ÑÐºÐ°Ð·Ð°Ð½ Ð¸ÑÑÐ¾ÑÐ½Ð¸Ðº Ð·Ð°Ð¿ÑÐ¾ÑÐ° Ð½Ð° ÑÐ´Ð°Ð»ÐµÐ½Ð½ÑÐ¹ Ð²ÑÐ¾Ð´. ÐÐ¼Ñ ÑÐ°Ð±Ð¾ÑÐµÐ¹ ÑÑÐ°Ð½ÑÐ¸Ð¸ Ð´Ð¾ÑÑÑÐ¿Ð½Ð¾ Ð½Ðµ Ð²ÑÐµÐ³Ð´Ð°, Ð¸ Ð² Ð½ÐµÐºÐ¾ÑÐ¾ÑÑÑ ÑÐ»ÑÑÐ°ÑÑ ÑÑÐ¾ Ð¿Ð¾Ð»Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð¾ÑÑÐ°Ð²Ð°ÑÑÑÑ Ð½ÐµÐ·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð½ÑÐ¼.  ÐÐ¾Ð»Ðµ \"Ð£ÑÐ¾Ð²ÐµÐ½Ñ Ð¾Ð»Ð¸ÑÐµÑÐ²Ð¾ÑÐµÐ½Ð¸Ñ\" Ð·Ð°Ð´Ð°ÐµÑ Ð´Ð¾Ð¿ÑÑÑÐ¸Ð¼ÑÑ ÑÑÐµÐ¿ÐµÐ½Ñ Ð¾Ð»Ð¸ÑÐµÑÐ²Ð¾ÑÐµÐ½Ð¸Ñ Ð´Ð»Ñ Ð¿ÑÐ¾ÑÐµÑÑÐ¾Ð² Ð² Ð´Ð°Ð½Ð½Ð¾Ð¼ ÑÐµÐ°Ð½ÑÐµ Ð²ÑÐ¾Ð´Ð° Ð² ÑÐ¸ÑÑÐµÐ¼Ñ.  ÐÐ¾Ð»Ñ ÑÐ²ÐµÐ´ÐµÐ½Ð¸Ð¹ Ð¾ Ð¿ÑÐ¾Ð²ÐµÑÐºÐµ Ð¿Ð¾Ð´Ð»Ð¸Ð½Ð½Ð¾ÑÑÐ¸ ÑÐ¾Ð´ÐµÑÐ¶Ð°Ñ Ð¿Ð¾Ð´ÑÐ¾Ð±Ð½ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð¾ ÐºÐ¾Ð½ÐºÑÐµÑÐ½Ð¾Ð¼ Ð·Ð°Ð¿ÑÐ¾ÑÐµ Ð½Ð° Ð²ÑÐ¾Ð´.  - GUID Ð²ÑÐ¾Ð´Ð° - ÑÑÐ¾ ÑÐ½Ð¸ÐºÐ°Ð»ÑÐ½ÑÐ¹ Ð¸Ð´ÐµÐ½ÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾Ñ, ÐºÐ¾ÑÐ¾ÑÑÐ¹ Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑÐµÑ ÑÐ¾Ð¿Ð¾ÑÑÐ°Ð²Ð¸ÑÑ Ð´Ð°Ð½Ð½Ð¾Ðµ ÑÐ¾Ð±ÑÑÐ¸Ðµ Ñ ÑÐ¾Ð±ÑÑÐ¸ÐµÐ¼ KDC.  - Ð Ð¿Ð¾Ð»Ðµ \"ÐÑÐ¾Ð¼ÐµÐ¶ÑÑÐ¾ÑÐ½ÑÐµ ÑÐ»ÑÐ¶Ð±Ñ\" ÑÐºÐ°Ð·Ð°Ð½Ð¾, ÐºÐ°ÐºÐ¸Ðµ Ð¿ÑÐ¾Ð¼ÐµÐ¶ÑÑÐ¾ÑÐ½ÑÐµ ÑÐ»ÑÐ¶Ð±Ñ ÑÑÐ°ÑÑÐ²Ð¾Ð²Ð°Ð»Ð¸ Ð² Ð´Ð°Ð½Ð½Ð¾Ð¼ Ð·Ð°Ð¿ÑÐ¾ÑÐµ Ð½Ð° Ð²ÑÐ¾Ð´.  - ÐÐ¾Ð»Ðµ \"ÐÐ¼Ñ Ð¿Ð°ÐºÐµÑÐ°\" ÑÐºÐ°Ð·ÑÐ²Ð°ÐµÑ Ð½Ð° Ð¿Ð¾Ð´Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð», Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð½ÑÐ¹ Ñ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ð°Ð¼Ð¸ NTLM.  - ÐÐ¾Ð»Ðµ \"ÐÐ»Ð¸Ð½Ð° ÐºÐ»ÑÑÐ°\" ÑÐ¾Ð´ÐµÑÐ¶Ð¸Ñ Ð´Ð»Ð¸Ð½Ñ ÑÐ¾Ð·Ð´Ð°Ð½Ð½Ð¾Ð³Ð¾ ÐºÐ»ÑÑÐ° ÑÐµÐ°Ð½ÑÐ°. Ð­ÑÐ¾ Ð¿Ð¾Ð»Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð¸Ð¼ÐµÑÑ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ \"0\", ÐµÑÐ»Ð¸ ÐºÐ»ÑÑ ÑÐµÐ°Ð½ÑÐ° Ð½Ðµ Ð·Ð°Ð¿ÑÐ°ÑÐ¸Ð²Ð°Ð»ÑÑ.".into());
                    map.insert("Opcode".into(), "Info".into());
                    map.insert("OriginatingComputer".into(), "10.99.101.128".into());
                    map.insert("PluginVersion".into(), "7.2.9.105".into());
                    map.insert("RecordNumber".into(), "11103971".into());
                    map.insert(
                        "Source".into(),
                        "Microsoft-Windows-Security-Auditing".into(),
                    );
                    map.insert("Task".into(), "SE_ADT_LOGON_LOGON".into());
                    map.insert("TimeGenerated".into(), "1610705793".into());
                    map.insert("TimeWritten".into(), "1610705793".into());
                    map.insert("User".into(), "".into());
                    map.insert("deviceVendor".into(), "Microsoft".into());
                    map.insert("eventName".into(), "7732".into());
                    map.insert("productName".into(), "MSExchange".into());
                    map.insert("productVersion".into(), "2007".into());
                    map
                }
            }
        );
    }

    #[test]
    fn invalid_utf8_key() {
        let data =
            b"Jan 18 11:07:53 192.168.1.1 LEEF:2.0|Microsoft|MSExchange|2007|7732|^|A\xFFBC=123";

        assert!(parse_leef(&*data).is_err())
    }
}
